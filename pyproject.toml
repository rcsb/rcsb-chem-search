# SPDX-FileCopyrightText: Copyright 2020-2025, Contributors to Tyrannosaurus
# SPDX-PackageHomePage: https://github.com/dmyersturnbull/tyrannosaurus
# SPDX-License-Identifier: Apache-2.0

#
####################################################################################################
#                                      [build-system]
####################################################################################################

[build-system]

build-backend = "hatchling.build"
requires = ["hatchling>=1.27"]

#
####################################################################################################
#                                      [project]
####################################################################################################

[project]

name = "rcsb-chem-search"
version = "0.0.1-alpha.0" # Omit prerelease specifier for "real" versions.
requires-python = "~=3.13.0"

# `readme` is `description` in `importlib.metadata`.
readme = { file = "README.md", content-type = "text/markdown" }
# `description` is `summary` in `importlib.metadata`.
description = "Backend REST API supporting chemical similarity searches on RCSB PDB chemical components."
keywords = ["cheminformatics", "search", "rcsb", "pdb"]
maintainers = [
  { name = "Douglas Myers-Turnbull", email = "douglas.myers-turnbull@rcsb.org" }
]
authors = [
  { name = "Douglas Myers-Turnbull", email = " douglas.myers-turnbull@rcsb.org" }
]
license = { text = "BSD-3-Clause" }
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Environment :: Web Environment",
  "Framework :: FastAPI",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering :: Chemistry",
  "Typing :: Typed",
]


# -------------------------- dependencies -------------------------------------
dependencies = [
  "rdkit>=2025.3", # When updating, check for breaking changes.
  "scikit-fingerprints>=1.16", # When updating, adjust any API docs.
  "fastapi>=0.116",
  "fastapi-problem>=0.11.4",
  "rfc9457>=0.3.6",
  "hypercorn>=0.17", # Extras in `optional-dependencies` below.
  "pydantic>=2.11", # Listed because we use it directly.
  # "aiofiles>=24", # TODO: Is this needed?
  "tzdata>=2025.2; platform_system == 'Windows'", # The Windows TZ DB isn't IANA;
]

# -------------------------- optional dependencies ----------------------------
[project.optional-dependencies]
modern = [
  "hypercorn[h3,uvloop]>=0.17",
  "zstandard>=0.23",
  "starlette-compress>=1.6",
]
etl = [
  "niquests>=3.15",
  "dramatiq[rabbitmq]>=1.18",
]
benchmarks = [
  "niquests>=3.15",
]

# -------------------------- project URIs -------------------------------------
[project.urls]
# ::tyranno:: "https://github.com/$<<~.frag>>"
Homepage = "https://github.com/rcsb/rcsb-chem-search"
# ::tyranno:: "https://github.com/$<<~.frag>>"
Source = "https://github.com/rcsb/rcsb-chem-search"
# ::tyranno:: Documentation = https://$<<~.vendor>>.github.io/$<<project.name>>
Documentation = "https://github.com/rcsb/rcsb-chem-search"
# ::tyranno:: "Tracker" = $<<.home>>/issues
Tracker = "https://github.com/rcsb/rcsb-chem-search/issues"
# ::tyranno:: Download = "https://pypi.org/project/$<<project.name>>"
Download = "https://pypi.org/project/rcsb-chem-search/"
# ::tyranno:: "Release Notes" = "https://github.com/$<<~.frag>>/releases"
"Release Notes" = "https://github.com/rcsb/rcsb-chem-search/releases"

#
####################################################################################################
#                                      [dependency-groups]
####################################################################################################

# See https://docs.astral.sh/uv/concepts/projects/dependencies/#dependency-groups
[dependency-groups]

# uv includes the `dev` group by default (and with `--only-dev`), so include everything in that.
# The other groups are solely intended for use in CI.
dev = [
  "uvicorn>=0.35", # TODO: remove
  "coverage[toml]>=7.10",
  "hypothesis>=6.130",
  "pre-commit>=4.3",
  "pytest>=8.4",
  "pytest-cov>=6.2",
  "pytest-datadir>=1.8",
  "pytest-randomly>=3.16",
  "pytest-xdist>=3.8",
  "ruff>=0.12.8",
  "ty>=0.0.1a17",
]
test = [
  "coverage[toml]>=7.10", # Required for coverage.
  "hypothesis>=6.130", # Property tests.
  "pytest>=8.4", # Required.
  "pytest-cov>=6.2", # Required for coverage.
  "pytest-datadir>=1.8", # Optional. To read test resources in the same dir.
  "pytest-randomly>=3.16", # Optional. Sets and prints the seed, also randomizing test order.
  "pytest-xdist>=3.8", # Optional. Used to distribute tests over multiple cores.
]
lint = [
  "ruff>=0.12.8",
  "ty>=0.0.1a17", # Astral's fledgling type checker.
]
precommit = ["pre-commit>=4.3"]

#
####################################################################################################
#                                      [tool.hatch]
####################################################################################################

[tool.hatch.build.targets.wheel]

# Needed only if `project.name.replace("-", "_") != namespace`,
# where `namespace` is the dir under `src/`.
# ::tyranno:: packages = ["src/$<<~.namespace>>"]
packages = ["src/rcsbchemsearch"]

#
####################################################################################################
#                                      [tool.ruff]
####################################################################################################

[tool.ruff]
exclude = [] # Rely on https://docs.astral.sh/ruff/settings/#respect-gitignore
src = ["src"] # Needed for import sorting
line-length = 100 # Keep consistent with `.editorconfig`.

# -------------------------- [tool.ruff.format] -------------------------------
[tool.ruff.format]
docstring-code-format = true
skip-magic-trailing-comma = true

# -------------------------- [tool.ruff.lint] ---------------------------------
[tool.ruff.lint]

preview = true
select = ["ALL"]

#          >>>#<<< align to col 15 (max possible width)
ignore = [
  # Conflicts with the formatter:
  # (See https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules)
  "W191",     # indented with tabs
  "D206",     # docstring indented with tabs
  "E114",     # indent not multiple of 4
  "E117",     # over-indented
  "E501",     # line too long
  "W505",     # docstring line too long
  "COM812",   # lacks trailing comma
  "COM819",   # has trailing comma
  "D300",     # triple single quotes
  "ISC002",   # implicit string concatentation
  "Q",        # quotes (formatter should cover completely)
  # ---
  # Other ignored rules:
  "D1",       # Undocumented public __ (don't write useless comments)
  "D401",     # Imperative mood
  "D417",     # Undocumented param (again, don't write useless text)
  "DOC201",   # Missing `Returns:`
  "DOC402",   # Missing `Yields:`
  "DOC501",   # Missing `Raises:` exception
  "DOC502",   # `Raises` lists exeption not raised directly (often ok)
  "E722",     # "bare-except" (use "blind-except" BLE001 instead)
  "FIX002",   # T*O*D*O (consider these to be non-critical)
  "PLR2004",  # magic value (includes 2, 256, 404, etc.)
  "PLR6301",  # 'self' not used (correct for overrides)
  "RUF001",   # confusable characters (would ban en dash, etc.)
  "RUF002",   # confusable characters
  "RUF003",   # confusable characters
  "RUF021",   # `or x and y` without parens (unnecessary)
  "S403",     # import of pickle (S301 on pickle calls is sufficient)
  "S404",     # import of subprocess (S602/S603 on subprocess calls is sufficient)
  "TD",       # flake8-to*do (requires a specific format)
]

unfixable = [
  "TC007",    # Quotes type alias definitions (move needed imports outside `TYPE_CHECKING` instead)
]
extend-safe-fixes = [
  "LOG004",   # Converts `.exception` to `.error` outside `except` blocks
]
extend-unsafe-fixes = [
  "B905",     # Adds `strict=False` to `zip` (normally `strict=True` is wanted)
  "PLW1510",  # Adds `check=False` to `subprocess.run` (normally `check=True` is wanted)
  "RUF102",   # Removes invalid `noqa`
]

# Delegated options
flake8-bandit.check-typed-exception = true
flake8-copyright.min-file-size = 2048
flake8-copyright.notice-rgx = "(?m)^# SPDX-License-Identifier: "
flake8-tidy-imports.ban-relative-imports = "all"
isort.detect-same-package = false # Use `tool.ruff.src` instead.
isort.split-on-trailing-comma = false # would conflict with formatter
pycodestyle.max-doc-length = 100 # match tool.ruff.line-length
pydocstyle.convention = "google"

# Delegated options for pylint
[tool.ruff.lint.pylint]
max-args = 10 # default is 5
max-positional-args = 5 # default is `max-args`
max-bool-expr = 10 # default is 5
max-public-methods = 30 # default is 20
max-nested-blocks = 4 # default is 5
allow-dunder-method-names = ["__rich_repr__"] # allow custom dunders

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = [
  "F401",    # unused import
]
"tests/**/*" = [
  "D10",      # missing docstrings
  "INP001",   # missing __init__
  "PLC2701",  # import of private module
  "S101",     # assert
  "S105",     # possible password in string
  "S106",     # ...in function arg
  "S107",     # ...in function default
  "S108",     # harcoded temp file
  "TID252",   # relative import
]

#
####################################################################################################
#                                      [tool.pytest]
####################################################################################################

[tool.pytest.ini_options] # pending `[tool.pytest]`

# ******************************* Notes for running tests ******************************************
# CWD and editor support:
# - When running tests, the working directory should be the project root.
# - pytest-cov is not compatible with the PyCharm/IntelliJ debugger.
#   See https://www.jetbrains.com/help/pycharm/run-debug-configuration-py-test.html
#
# Notable CLI options:
# - `--cov` to calculate coverage (saved to `.coverage.json`).
# - `-n <n_workers>` to distribute over `n_workers` workers via pytest-xdist.
#   Use `-n auto` to use the number of **physical** cores (which might be 1/2 occupancy).
#   This suppresses logging; see https://github.com/pytest-dev/pytest-xdist/issues/574
# **************************************************************************************************

# This pytest 7+ option avoids repeating the package name in various options.
pythonpath = ["src/"]

# Set the default path to `tests/` so that it can be omitted on CLI.
# Don't use `.` or `["tests/", "src/"]`, which would run `src/**/test*.py`.
# For doctests, run `pytest --doctest-modules src/`
testpaths = ["tests/"]

# Error if a test has an empty parameter set.
empty_parameter_set_mark = "fail_at_collect"

# -------------------------- Logging config -----------------------------------
# Configure logging, and send it "live" (in realtime) to stdout with `log_cli`.
# In `tests/**/*.py`, append `-TEST` to logger names to distinguish them.
log_level = "WARNING"
log_cli = true
log_format = "%(asctime)s %(levelname)-7s %(name)s %(filename)s:%(lineno)s | %(message)s "
log_date_format = "%Y-%m-%d %H:%M:%S"

# -------------------------- Doctest options ----------------------------------
# These are used when running `pytest --doctest-modules src/`.
doctest_optionflags = [
  "DONT_ACCEPT_TRUE_FOR_1", # Makes doctest not consider 1 to equal True.
  "NORMALIZE_WHITESPACE",   # Ignores newlines, so we can wrap expected output.
]

# -------------------------- Test markers -------------------------------------
# Define markers that are useful to include/exclude sets of tests.
# Note that the `hypothesis` marker is auto-added.
# - Simple tests only: `-m 'not (slow or net or ux or e2e)'`
# - Simple property tests: `-m 'hypothesis and not (slow or net or ux or e2e)'`
markers = [
  "slow: tests that need a long time to run",
  "net: tests that need network access",
  "ux: tests that need user interaction or manual verification",
  "e2e: tests that need external services",
]

# -------------------------- Pytest CLI args ----------------------------------
# The `--cov-*` options are handled by pytest-cov.
# `--quiet` just hides ouptut about 'rootdir', 'testpaths', etc.
addopts = """
  --import-mode=importlib \
  --cov-report=term \
  --strict-config \
  --strict-markers \
  --tb=short \
"""

#
###################################################################################################
#                                      [tool.coverage]
###################################################################################################

[tool.coverage.run]
data_file = ".coverage.json"
branch = true # Quantify the % coverage of execution branches.
relative_files = true # See https://coverage.readthedocs.io/en/7.6.12/config.html#run-relative-files
omit = ["**/__main__.py"]
concurrency = [] # Imortant!

[tool.coverage.paths]
source = ["src/"]

[tool.coverage.report]
fail_under = 2 # Require % coverage to ensure config is correct
format = "markdown"
precision = 1 # n decimal points for coverage %
show_missing = true
skip_empty = true
exclude_also = [
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == \"__main__\":",
  "if TYPE_CHECKING:",
  "if typing.TYPE_CHECKING:",
]

[tool.coverage.json]
output = ".coverage.json"

#
####################################################################################################
#                                      [tool.tyranno]
####################################################################################################
[tool.tyranno.data]
vendor = "rcsb"
# ::tyranno:: namespace = "$<< project.name .replace(@, '_', '-') .lower(@) >>"
namespace = "rcsbchemsearch"
# ::tyranno:: frag = "$<<~.vendor>>/$<<project.name>>"
frag = "rcsb/rcsb-chem-search"
# ::tyranno:: copyright = "Copyright $<<now_utc().year>>, Contributors to $<<project.name>>"
copyright = "Copyright 2025, Contributors to rcsb-chem-search"
