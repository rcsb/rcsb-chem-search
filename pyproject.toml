# SPDX-FileCopyrightText: Copyright 2020-2025, Contributors to rcsb-chem-search
# SPDX-PackageHomePage: https://github.com/rcsb/rcsb-chem-search
# SPDX-License-Identifier: BSD-3-Clause

#########################################################################################
#                                    [build-system]
#########################################################################################

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling>=1.27"]

#########################################################################################
#                                      [project]
#########################################################################################

[project]
name = "rcsb-chem-search"
version = "0.0.1-alpha0"
requires-python = "~=3.13"
readme = { file = "README.md", content-type = "text/markdown" }
description = "Backend REST API supporting chemical similarity searches on RCSB PDB chemical components."
maintainers = [
  { name = "Douglas Myers-Turnbull", email = "douglas.myers-turnbull@rcsb.org" }
]
authors = [
  { name = "Douglas Myers-Turnbull", email = " douglas.myers-turnbull@rcsb.org" }
]
keywords = ["cheminformatics", "search", "rcsb", "pdb"]
license = { text = "BSD-3-Clause" }
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Environment :: Web Environment",
  "Framework :: FastAPI",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering :: Chemistry",
  "Typing :: Typed",
]

dependencies = [
  "fastapi>=0.115",
  "granian>=2.0",
  "loguru>=0.7.3",
  "niquests>=3.13",
  "scikit-fingerprints>=1.15", # When updating, adjust any API docs (e.g. if default parameters change)
  "rdkit>=2024.9.6", # When updating, check for backwards-incompatible changes.
  "typer-slim>=0.15",
  "tzdata>=2025.2; platform_system == 'Windows'",
]

[project.optional-dependencies]

compression = [
  "starlette-compress>=1.5",
  "zstd>=1.5.6",
]

#
#=================================== scripts =================================#
#
[project.scripts]
# :tyranno: ${project.name} = "${project.name}.__main__:cli"
chem-search-etl = "rcsbchemsearch.__main__:cli"

#
#==================================== URIs ===================================#
#
[project.urls]
# :tyranno: "https://github.com/${.frag}"
Homepage = "https://github.com/rcsb/rcsb-chem-search"
# :tyranno: "https://github.com/${.frag}"
Source = "https://github.com/rcsb/rcsb-chem-search"
# :tyranno: Documentation = https://${.vendor}.github.io/${project.name}
Documentation = "https://github.com/rcsb/rcsb-chem-search"
# :tyranno: "Tracker" = ${.home}/issues
Tracker = "https://github.com/rcsb/rcsb-chem-search/issues"
# :tyranno: Download = "https://pypi.org/project/${project.name}"
Download = "https://pypi.org/project/rcsb-chem-search/"
# :tyranno: "Release Notes" = "https://github.com/${.frag}/releases"
"Release Notes" = "https://github.com/rcsb/rcsb-chem-search/releases"


#########################################################################################
#                                          [dependency-groups]
#########################################################################################

# See https://docs.astral.sh/uv/concepts/projects/dependencies/#dependency-groups
[dependency-groups]

dev = [
  "coverage[toml]>=7.6.10",
  "pre-commit>=4.0.1",
  "pyright[nodejs]>=1.1",
  "pytest>=8.3",
  "pytest-cov>=6.0",
  "ruff>=0.11",
]

[tool.hatch.build.targets.wheel]
packages = ["src/rcsbchemsearch"]


#
#########################################################################################
#                                 [tool.ruff]
#########################################################################################

[tool.ruff]

#
#=================================== Ruff basics =============================#

line-length = 120 # 120 is hatch's default via 'hatch init'
include = [
  "*.py",           # Source
  "pyproject.toml", # This file (RUF rules only)
  "*.ipynb",        # Jupyter notebooks
]

#
#=================================== Ruff lint ==============================#

[tool.ruff.lint]

#
# ------------------------- Ruff misc. options ----------------------
preview = true
explicit-preview-rules = true

#
# ---------------------- Ruff selected rule sets --------------------

#             # align to col 15 == 1 + len('  #' '"ASYNC'" '111' ',' ' ')
select = [
  "A",        # flake8-builtins
  #"AIR",     # Airflow //DISABLED: enable if using airflow//
  "ANN",      # flake8-annotations
  #"ARG",     # flake8-unused-args //DISABLED: correct in overrides//
  "ASYNC",    # flake8-async
  "B",        # flake8-bugbear
  "B901",     # PREVIEW: Return in generator
  #"BLE",     # flake8-blind-exception (try: * except: only) //DISABLED: covered by E722 (?)//
  "C4",       # flake8-comprehensions
  #"C90",     # mmcabe //DISABLED: useful but thin-lined and time-intensive//
  #"COM",     # flake8-commas //DISABLED: handled by formatter//
  #"CPY",     # flake8-copyright //DISABLED: handle carefully instead; also unmaintained//
  #"D",       # pydocstyle //DISABLED: most rules handled by formatter//
  "D1",       # undocumented public methods, etc.
  "D210",     # whitespace around text
  "D214",     # over-indented section
  "D3",       # docstring ''', \, etc.
  "D4",       # blank docstring sections, etc.
  #"DJ",      # flake8-django //DISABLED: enable if using Django//
  "DOC",      # pydoclint //DISABLED: encourages writing sections out of habit//
  #"DOC202",  # says "return" but does not (PREVIEW)
  #"DOC403",  # says "yield" but does not (PREVIEW)
  "DTZ",      # flake8-datetimez
  #"E",       # pycodestyle ERRORs //DISABLED: almost all handled by formatter//
  "E7",       # == True, bare except, lambda assignment, 'l' in names, etc.
  "E9",       # can't lint -- syntax error, etc.
  "EM",       # flake8-errmsg
  #"ERA",     # eradicate (commented-out code) //DISABLED: catches code in comments, etc.//
  #"EXE",     # flake8-executable //DISABLED: pre-commit shebang rules instead//
  "F",        # pyflakes
  "FA",       # flake8-future-annotations
  "FAST",     # fastapi (disable if not using)
  #"FBT",     # flake8-boolean-trap //DISABLED: debatable and sometimes unavoidable//
  #"FIX",     # flake8-fix*me //DISABLED: unnecessary //
  "FIX003",   # 'XXX: ' comments (use F*I*X*M*E or T*O*D*O instead)
  "FIX004",   # 'HACK: ' comments (use F*I*X*M*E or T*O*D*O instead)
  "FLY",      # flynt (https://pypi.org/project/flynt/; updates .format)
  "FURB",     # refurb (misc., mostly fixable)
  #"E",       # flake8 errors //DISABLED: handled by formatter or nitpicky//
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventionals
  #"INP",     # flake8-no-pep420 (require __init__.py to import) //DISABLED: false positives//
  "INT",      # flake8-gettext (i18n)
  "ISC",      # flake8-implicit-str-concat
  "LOG",      # flake8-logging
  "N",        # pep8-naming
  #"NPY",     # numpy-specific rules //DISABLED: enable if using numpy//
  #"PD",      # pandas-vet //DISABLED: enable if using pandas//
  "PERF",     # perflint
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie (misc. lint rules)
  "PL",       # pylint (PLC, PLE, PLR, and PLW)
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  #"PYI",     # flake8-pyi (rules for stub files) //DISABLED: auto-generate stub files//
  #"Q",       # flake8-quotes //DISABLED: handled by formatter//
  #"RSE",     # flake8-raise //DISABLED: handled by formatter//
  "RET",      # flake8-return (fixable)
  "RUF",      # Ruff-specific tests
  "S",        # bandit
  "SIM",      # flake8-simplify
  "SLF",      # flake8-self (private access)
  "SLOT",     # flake8-slots
  "T10",      # flake8-debugger (bans debugger)
  "T20",      # flake8-print (bands print and pprint)
  #"TD",      # flake8-to*do (mandates syntax) //DISABLED: bans fix*me, requires author, nitpicky//
  "TCH",      # flake8-type-checking
  "TID",      # flake8-tidy-imports (bans relative imports)
  "TRY",      # tryceratops (try-except-raise)
  "UP",       # pyupgrade
  "UP04",     # PREVIEW: 3.11+ fixes
  #"W",       # warnings //DISABLED: most fixed by formatter//
  "W60",      # E605 invalid escape character
  "YTT",      # flake8-2020 (incorrect Python version checks)
  "RUF",      # Ruff-specific rules
]

#
# ------------------------ Ruff ignored rules ----------------------
ignore = [
  "ISC001",   # contradicts Ruff formatter
  "PLR6301",  # 'self' not used (correct for overrides; more OOP)
]

#
# ------------------------ Ruff unfixable rules ---------------------
unfixable = [
  "F841",     # unused variable
  "SIM112",   # uncapitalized env var
  "TD006",    # 'to*do' -> 'TO*DO'
]

#
# ----------------------- Ruff delegated options --------------------

flake8-bandit.check-typed-exception = true
pydocstyle.convention = "google"
flake8-tidy-imports.ban-relative-imports = "all"

[tool.ruff.lint.pylint]
max-args = 8 # default is 5
max-positional-args = 3 # default is 5
max-bool-expr = 8 # default is 5

#
# ------------------------ Ruff per-file ignores --------------------
[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
  "INP001",  # missing __init__
  "PLR2004", # magic value
  "S101",    # assert
  "S105",    # possible password in string
  "S106",    # in function arg
  "S107",    # in function default
  "S108",    # harcoded temp file
  "TID252",  # relative import
]

#
#########################################################################################
#                                  [tool.pytest]
#########################################################################################

# A future version of pytest will create `[tool.pytest]`.
[tool.pytest.ini_options]

# This pytest 7+ option avoids repeating the package name in various options.
#pythonpath = "./src" # critical!
pythonpath = ["src/"]

# Set the default path to `tests/` so that it can be omitted on CLI.
# Don't use `.` or `["tests/", "src/"]`: That would mistakenly pick up `src/**/Test*.py`.
# Any doctests in `src/**/*.py` won't be found.
# Doctests must be run manually like this:
# `pytest --doctest-modules src/`
testpaths = ["tests/"]

# Configure logging, and send it "live" (in realtime) to stdout with `log_cli`.
# In `tests/**/*.py`, append `-TEST` to logger names to distinguish them.
log_level = "INFO"
log_cli = true
log_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)"
log_date_format = "%Y-%m-%d %H:%M:%S"

# These are used when running `pytest --doctest-modules src/`.
doctest_optionflags = [
  "DONT_ACCEPT_TRUE_FOR_1", # Makes doctest not consider 1 to equal True.
  "NORMALIZE_WHITESPACE",   # Ignores newlines, so we can wrap expected output.
]

# Create markers for very slow, network-dependent, or interactive tests.
markers = [
  "slow: marks tests that take a long time to run (select with `-m slow`)",
  "net: marks tests that require network access (select with `-m net`)",
  "ux: marks tests that require manual input such as in-browser (select with `-m ux`)",
]

# `coverage` stops recursing after it finds one dir without an __init__.py
# So, if it finds `src/java-app` before `src/pyapp`, it won't find `pyapp`.
# So, we need to specify which directory to test via `--cov=src/{pkg}`.
# The `--cov-*` options are handled by pytest-cov.
# `--import-mode=importlib` is recommended but requires test classes to have unique names.
# `-r` controls the summary columns:
# (f)ailed, (E)rror, (s)kipped, (x)failed, (X|p)passed, (p)assed
# `--quiet` hides 'rootdir', 'testpaths', etc.
# ---
# :tyranno: addopts = """
# :tyranno:   --cov=src/${{.namespace}} \
addopts = """
  --cov=src/rcsbchemsearch \
  --cov-report json:.coverage.json \
  --cov-report term \
  --cov-config=pyproject.toml \
  --import-mode=importlib \
  --strict-config \
  --strict-markers \
  --quiet
"""

# To run only unit tests, run:
# `-m 'not (slow or net or ux)'`
# To show the slowest tests, add:
# `--durations=5 --durations-min=0.1`
# Other useful options to add:
# `--verbose`     : Show full test names.
# `--full-trace`  : Show full stack traces.
# `--showlocals`  : Show local variables.

#
#########################################################################################
#                                 [tool.coverage]
#########################################################################################

[tool.coverage.run]
data_file = ".coverage.json"
branch = true # Quantify the % coverage of execution branches.
relative_files = true

[tool.coverage.paths]
source = ["src/"]

[tool.coverage.report]
#fail_under = 90 # % coverage required
format = "markdown"
precision = 1 # n decimal points for coverage %
show_missing = true
skip_empty = true
exclude_also = [
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == \"__main__\":",
  "if TYPE_CHECKING:",
  "if typing.TYPE_CHECKING:",
]

#
#########################################################################################
#                                       [tool.pyright]
#########################################################################################

[tool.pyright]

include = ["src/**/*.py", "tests/**/*.py"]
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
strictParameterNoneValue = false
deprecateTypingAliases = true
enableReachabilityAnalysis = true
typeCheckingMode = "strict"
reportImplicitOverride = "error"
reportImportCycles = "error"
reportMissingSuperCall = "error"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"

# strictness options
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_defs = true
warn_redundant_casts = true
warn_no_return = true
warn_return_any = true

# misc. options
# warn if an unreachable execution branch is found
warn_unreachable = true
# warn if a `# type: ignore` is unnecessary
warn_unused_ignores = true
# no testing 'abc' == 123
strict_equality = true

# formatting output options
pretty = true
show_column_numbers = true
show_error_code_links = true

#
#########################################################################################
#                                   [tool.tyranno]
#########################################################################################

[tool.tyranno]

# These are `.gitignore`-type patterns.
# All trash globs are automatically excluded from targets.
# So, e.g., `.py` files in cache dirs are never synced.
targets = [
  "/.*ignore",
  "/.editorconfig",
  "/CITATION.cff",
  "/justfile",
  "*.css",
  "*.ini",
  "*.js",
  "*.md",
  "*.py",
  "*.ts",
  "*.toml",
  "*.yaml",
  "Dockerfile",
]

trash = [
  "*[~#$]",
  "[~#$]*",
  ".[~#$]*",
  "*[.~]bak",
  "*[.~]swp",
  "*[.~]temp",
  "*[.~]tmp",
  ".*[_-]cache",
  "*.class",
  "*.py[codi]",
  "__pycache__/",
  ".coverage.json",
  "cython_debug",
]

[tool.tyranno.data]
vendor = "rcsb"
frag = "${.vendor}/${project.name}"
copyright = "Copyright ${now_utc().year}, Contributors to ${project.name}"
doi = "10.5281/zenodo.4485186" # <<<comment out for new
# This is the version used in CD and some CI
default-python-version = "3.13.1"
# These are the versions to test in CI:
python-versions = ["3.13.1"]
