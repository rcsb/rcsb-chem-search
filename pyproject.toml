# SPDX-FileCopyrightText: Copyright 2020-2024, Contributors to CICD
# SPDX-PackageHomePage: https://github.com/dmyersturnbull/cicd
# SPDX-License-Identifier: Apache-2.0
#
# SPDX-FileCopyrightText: Copyright 2024, the RCSB PDB and contributors
# SPDX-PackageHomePage: https://github.com/rcsb/rcsb-chem-search
# SPDX-License-Identifier: BSD-3-Clause
#
# Original source code is from:
# CICD (https://github.com/dmyersturnbull/cicd).
# This file includes modifications.
#
###########################################################
#                     [build-system]
###########################################################

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling~=1.25.0"]

#
###########################################################
#                       [project]
###########################################################

[project]
name = "rcsbchemsearch"
version = "0.0.1-alpha0"
requires-python = "~=3.12"
# 'readme' |--> 'description' in importlib.metadata
readme = { file = "README.md", content-type = "text/markdown" }
# 'description' |--> 'summary' in importlib.metadata
description = "CI/CD test repo"
maintainers = [
  { name = "Douglas Myers-Turnbull", email = " dmyersturnbull@gmail.com" }
]
authors = [
  { name = "Douglas Myers-Turnbull", email = " dmyersturnbull@gmail.com" }
]
license = { text = "Apache-2.0" }
keywords = ["python", "ci", "cd"]
classifiers = [
  "Natural Language :: English",
  "Programming Language :: Python :: 3 :: Only",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Environment :: Console",
  "Topic :: Software Development :: Build Tools",
]
dependencies = [
  "regex >=2024.0",
  "tomlkit >=0.12",
  "loguru >=0.7",
  "orjson >=3.8",
  "pydantic >=2.8",
  "fastapi >=0.111",
  "starlette-compress >=1.0",
  "pymongo >=4.8",
  "rdkit >=2024.3",
  "polars[pyarrow] >=1.0",
]

#
#=============== URLs ===============#
#
[project.urls]
# :tyranno: "https://github.com/${.frag}"
Homepage = "https://github.com/dmyersturnbull/rcsbchemsearch"
# :tyranno: "https://github.com/${.frag}"
Source = "https://github.com/dmyersturnbull/rcsbchemsearch"
# :tyranno: "https://github.com/${.frag}/releases"
Changelog = "https://github.com/dmyersturnbull/rcsbchemsearch/releases"

#
###########################################################
#                     [tool.hatch]
###########################################################

[tool.hatch.version]
path = "src/rcsbchemsearch/__init__.py"

[tool.hatch.envs.default]
  dependencies = [
    "pre-commit >=3.7",
    "hypothesis >=6.1",
    "pytest >=8.2",
    "tzdata >=2024",
    "coverage[toml] >=7.5",
    "pytest-cov >=5.0",
    "mypy >=1.10",
    "ruff >=0.4.8",
    "commitizen >=3.0",
    "Hypercorn >=0.17",
]

#
#=============== Hatch scripts ===============#
#
#skip-install = true
[tool.hatch.envs.default.scripts]
# interactive commit with Commitizen
commit = "cz commit {args}"
# 'test' uses args in [tool.pytest] section (you can pass more)
test = "pytest {args}"
# 'clean' removes unnecessary files (always safe to run)
clean = "tyranno clean {args}"
# build docs and fail for any warning
build-docs = "mkdocs build --clean --strict {args}"
# preview docs (only the current version)
# also builds, but only prints warnings
serve-docs = "mkdocs serve {args}"
# 'format' formats and fixes issues but does not complain
format = [
  "ruff format",
  "ruff check --fix-only",
]
# 'check' only checks but never fixes
check = [
  "ruff check --no-fix .",
  "mypy --non-interactive {args:src/rcsbchemsearch tests}"
]
# only checks with ruff (mypy has a lot of false positives)
check-ruff = "ruff check --no-fix ."
# to complement 'check-ruff'
check-mypy = "mypy --non-interactive {args:src/rcsbchemsearch tests}"
# only check security via Bandit; we require these rules to pass
check-security = "ruff check --select S --no-fix ."

#
###########################################################
#                       [tool.ruff]
###########################################################

[tool.ruff]
line-length = 120 # 120 is hatch's default via 'hatch init'

include = [
  "*.py", # Source
  "*.pyi", # Compiled
  "pyproject.toml", # This file (RUF rules only)
  "*.ipynb" # Jupyter notebooks
]
select = [
  "A", # flake8-builtins
  "ANN", # flake8-annotations
  "ASYNC", # flake8-async
  "B", # flake8-bugbear
  "BLE", # flake8-blind-exception
  "C", # flake8-comprehensions
  "COM", # flake8-commas
  "DTZ", # flake8-datetimez
  "EM", # flake8-errmsg
  "F", # pyflakes
  "FA", # flake8-future-annotations
  "E", # flake8 errors (most fixed by black; rest are nitpicky)
  "G", # flake8-logging-concat
  "I", # isort
  "INP", # flake8-no-pep420
  "ISC", # flake8-implicit-str-concat
  "N", # flake8-naming
  "NPY", # numpy-specific rules
  "PERF", # perflint
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie
  "PL", # pylint
  "PTH", # flake8-use-pathlib
  "Q", # flake8-quotes
  "RUF", # Ruff-specific tests
  "S", # bandit
  "SIM", # flake8-simplify
  "SLOT", # flake8-slots
  "T10", # debugger
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports (mostly bans relative imports)
  "UP", # pyupgrade
  "W", # warnings (most fixed by Black, but W605 is invalid escape char)
  "YTT", # flake8-2020 (unlikely problematic checks for Python version)
  "RUF" # Ruff-specific rules
]
exclude = [
  "ARG", # flake8-unused (unused parameters are almost always intentional, like when overriding)
  "FBT", # flake8-boolean-trap (debatable, and might not have a choice)
  "ICN", # flake8-import-conventionals (isort does this)
]
ignore = [
  "COM812", # contradicts Ruff formatter
  "D107", # missing docstring in __init__ (put in class docstring)
  "D212", # multi-line docstring start (contradictory)
  "E203", # clons with space before (sometimes useful expand)
  "E225", # missing whitespace around operator (sometimes useful to condense)
  "E501", # line > 79 chars (we use Ruff's formatter)
  "INP001", # missing __init__ -- false positives
  "ISC001", # contradicts Ruff formatter
]
unfixable = [
  "RUF100", # Unused noqa (should fix manually)
]
flake8-bandit.check-typed-exception = true
pydocstyle.convention = "google"
flake8-tidy-imports.ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
"tests/**/*" = [
  "INP001", # missing __init__
  "PLR2004", # magic value
  "S101", # assert
  "TID252", # relative import
  "S105", # possible password
  "S106",
  "S107",
  "S108", # harcoded temp file
]

#
###########################################################
#                      [tool.pytest]
###########################################################

# A future version of pytest will create [tool.pytest]
[tool.pytest.ini_options]
pythonpath = "./src" # critical!
# coverage stops recursing after it finds one dir without an __init__.py
# so if it finds src/java-app before src/pyapp, it won't find pyapp
# So specify exactly which directories to test
# :tyranno: addopts = "--cov=src/${project.name} --cov-report xml:coverage.xml --cov-report term --cov-config=pyproject.toml"
addopts = """
  --cov=src/rcsbchemsearch \
  --cov-report json:coverage.json \
  --cov-report term \
  --cov-config=pyproject.toml \
  tests/
"""
# show log output from the tests
# in the tests/ code, name the logger {pkg}-TEST to differentiate
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
# create markers so we can disable integration, network-connected, or very slow tests if desired
markers = [
  "integration: marks integration tests (deselect with '-m \"not integration\"')",
  "network: marks tests that require network access (deselect with '-m \"not network\"')"
]
doctest_optionflags = [
  "DONT_ACCEPT_TRUE_FOR_1", # 1 is not the same as True
  "NORMALIZE_WHITESPACE", # allows us to wrap expected output to 120 lines (ignores newlines)
]

#
###########################################################
#                    [tool.coverage]
###########################################################

[tool.coverage.run]
data_file = "coverage.json"
branch = true # quantify % coverage of execution branches
parallel = true # note that pytest-cov overrides this
# :tyranno: source_pkgs = ["src/${project.name}"]
source_pkgs = ["rcsbchemsearch"]
omit = ["src/**/__main__.py"]

[tool.coverage.paths]
source = ["src/"]

[tool.coverage.report]
fail_under = 50 # 50% coverage required
precision = 1 # n decimal points for coverage %
show_missing = true
exclude_lines = [
  "nocov",
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

#
###########################################################
#                      [tool.mypy]
###########################################################

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
pretty = true
show_column_numbers = true
warn_unused_ignores = true

#
###########################################################
#                    [tool.commitizen]
###########################################################

[tool.commitizen]
major_version_zero = true # when true and vr < 1.0.0, breaking changes bump the minor version.
annotated_tag = true
gpg_sign = true
version_scheme = "semver"
version_provider = "pep621"
bump_message = "bump: version $current_version → $new_version"
name = "cz_customize" # our custom configuration (see below)
changelog_incremental = true
changelog_merge_prerelease = true

#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~----
#        [tool.commitizen.customize]
# This should eventually be turned into a plugin.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~----

[tool.commitizen.customize]
example = "feat(i18n): add Japanese translation"
info = """
We use [Conventional Commits](https://www.conventionalcommits.org/) with the following types.

| Type           | Label               | Changelog section  | semver | Description                                                         |
|----------------|---------------------|--------------------|--------|---------------------------------------------------------------------|
| `feat:`        | `type: feature`     | `✨ Features`       | minor  | Addition or modification of a feature                               |
| `security:   ` | `type: security`    | `🔒️ Security`     | minor  | Vulnerability fix/mitigation or hardening                           |
| `deprecation:` | `type: security`    | `🗑️ Deprecation`  | minor  | Deprecation of a feature or API component                           |
| `fix:`         | `type: fix`         | `🐛 Bug fixes`     | patch  | Bug fix, excluding security vulnerabilities                         |
| `perf:`        | `type: performance` | `⚡️ Performance`   | patch  | Code change that improves performance                               |
| `build:`       | `type: build`       | `🔧 Build system`  | minor  | Modify build, including Docker                                      |
| `docs:`        | `type: docs`        | `📝 Documentation` | patch  | Add or modify docs or examples                                      |
| `test:`        | `type: test`        | `🍒 Miscellaneous` | N/A    | Addition or modification of tests                                   |
| `refactor:`    | `type: refactor`    | `🍒 Miscellaneous` | N/A    | Code change that neither fixes a bug nor adds or modifies a feature |
| `ci:`          | `type: ci`          | `🍒 Miscellaneous` | N/A    | Change to continuous integration and deployment (CI/CD)             |
| `style:`       | `type: style`       | ignored            | N/A    | Code change that does not affect the meaning of the code            |
| `chore:`       | `type: chore`       | ignored            | N/A    | Change that does not modify source, test, or documentation files    |
"""

# The 'bump' type can't be used via commitizen; it's reserved for 'bump' command.
commit_parser =  """\
^\
(?P<change_type>feat|security|deprecation|fix|perf|build|docs|test|refactor|ci|style|chore|bump)\
(?:\\((?P<scope>[-a-z0-9]+)\\))?\
(?P<breaking>!)?\
: (?P<message>[^\n]+)\
.*\
"""

# 'style' and 'chore' are not included in the changelog.
changelog_pattern = "^(feat|fix|security|perf|build|docs|refactor|test|ci)?(!)?"

schema = """
<type>[(<scope>)][!]: <subject>

<body>

[BREAKING CHANGE: <breaking>]
[*: <author>]+

Signed-off-by: <author>
"""

# See https://lore.kernel.org/git/60ad75ac7ffca_2ae08208b@natae.notmuch/
schema_pattern = """\
(?s)"\
(drop|feat|security|depr|fix|perf|build|docs|refactor|test|ci|style|chore|release)\
(?:\\(\\([-a-z0-9]+)\\))?\
(!)?\
: ([^\n]+)\
(?:\
\n\
(?:\nBREAKING CHANGE: [^\n]+))?\
(?:\nCloses #(\\d+(?:, \\d+)*))\
(?:\n((?:\
  Co-authored-by|Acked-by|Reviewed-by|Helped-by|Reported-by|Mentored-by|Suggested-by|CC|Noticed-by|Tested-by\
  |Improved-by|Thanks-to|Based-on-patch-by|Contributions-by|Co-authored-by|Requested-by|Original-patch-by|Inspired-by\
): [^\n]+))*\
(?:\nSigned-off-by: ([^\n]+))*\
)?\
"""

message_template = """\
{{change_type}}\
{% if scope %}{{scope | trim}}{% endif %}\
{% if breaking %}!{% endif %}\
: {{subject | trim}}\
\n{{body | trim}}\
{% if breaking %}\nBREAKING CHANGE: {{breaking | trim}}{% endif %}\
{% if trailers %}\
{% set trailerslist = trailers.split('||') %}\
{% for trailer in trailerslist %}\n{{trailer | trim}}{% endfor %}\
{% endif %}\
"""

# 'refactor', 'ci', 'style', 'test', and 'chore' should never trigger a version bump.
# (However, 'refactor', 'test', and 'ci' are included in the changelog under 'Miscellaneous'.)
bump_pattern = "^(drop|feat|depr|security|fix|perf|build|docs)"

change_type_order = [
  "breaking",
  "drop",
  "feat",
  "security",
  "depr",
  "fix",
  "perf",
  "build",
  "docs",
  "test",
  "refactor",
  "ci",
  "style",
  "chore"
]

[tool.commitizen.customize.bump_map]
breaking = "MAJOR"
drop = "MAJOR" # redundant -- hopefully these are marked breaking, too
feat = "MINOR"
security = "PATCH"
deprecation = "MINOR"
fix = "PATCH"
perf = "PATCH"
build = "PATCH"
docs = "PATCH"
refactor = "PATCH"

[tool.commitizen.customize.change_type_map]
security = "🔒️ Security"
feat = "✨ Features"
depr = "✨ Deprecations"
fix = "🐛 Bug fixes"
perf = "⚡️ Performance"
build = "🔧 Build"
docs = "📝 Documentation"
refactor = "🍒 Miscellaneous"
test = "🍒 Miscellaneous"

[[tool.commitizen.customize.questions]]
type = "list"
name = "change_type"
message = "Select the type of change you are committing"
choices = [
  {value = "feat", name = "feat: A new feature.", key="f"},
  {value = "drop", name = "drop: Remove a feature.", key="x"},
  {value = "depr", name = "depr: Deprecation of feature.", key="e"},
  {value = "fix", name = "fix: A bug fix.", key="x"},
  {value = "security", name = "security: An exploit fix.", key="v"},
  {value = "perf", name = "perf: A performance improvement.", key="p"},
  {value = "build", name = "build: A build system change.", key="b"},
  {value = "test", name = "test: Add/change tests.", key="t"},
  {value = "docs", name = "docs: A change to documentation.", key="d"},
  {value = "refactor", name = "refactor: A code refactoring.", key="r"},
  {value = "ci", name = "ci: A change to CI/CD.", key="c"},
  {value = "style", name = "style: A change to code style.", key="s"},
  {value = "chore", name = "chore: A change to something non-code.", key="z"},
]

[[tool.commitizen.customize.questions]]
type = "input"
name = "subject"
message = "A short, imperative summary: (lowercase and no period).\n"

[[tool.commitizen.customize.questions]]
type = "list"
name = "scope"
message = "Scope (press [enter] to skip).\n"
choices = [
  {value = "", name = "[none]"},
  {value = "i18n", name = "i18n: Internationalization."},
  {value = "plugins", name = "plugins: Plugins."}
]

[[tool.commitizen.customize.questions]]
type = "input"
name = "body"
message = "Body. Additional information: (press [enter] to skip)\n"

[[tool.commitizen.customize.questions]]
type = "input"
name = "breaking"
message = """
  If this is a breaking change, list the affected classes, methods, or endpoints: \
  (press [enter] to skip)\n
"""

[[tool.commitizen.customize.questions]]
type = "input"
name = "trailers"
message = """
  [ADVANCED]\n\
  Git trailers, separated by '||'. \
  Each must be in the form '<key>: <value>'; \
  e.g., 'Reviewed-by: John Johnson <john@git.com>': \
  (press [enter] to skip)\n
"""
