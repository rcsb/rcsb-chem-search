# SPDX-FileCopyrightText: Copyright 2020-2025, Contributors to rcsb-chem-search
# SPDX-PackageHomePage: https://github.com/rcsb/rcsb-chem-search
# SPDX-License-Identifier: BSD-3-Clause

#
#########################################################################################
#                                    [build-system]
#########################################################################################

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling>=1.27"]

#
#########################################################################################
#                                      [project]
#########################################################################################

[project]
name = "rcsb-chem-search"
version = "0.0.1-alpha0"
requires-python = "~=3.13"
readme = { file = "README.md", content-type = "text/markdown" }
description = "Backend REST API supporting chemical similarity searches on RCSB PDB chemical components."
maintainers = [
  { name = "Douglas Myers-Turnbull", email = "douglas.myers-turnbull@rcsb.org" }
]
authors = [
  { name = "Douglas Myers-Turnbull", email = " douglas.myers-turnbull@rcsb.org" }
]
keywords = ["cheminformatics", "search", "rcsb", "pdb"]
license = { text = "BSD-3-Clause" }
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Environment :: Web Environment",
  "Framework :: FastAPI",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering :: Chemistry",
  "Typing :: Typed",
]

dependencies = [
  "fastapi>=0.115",
  "fastapi-problem>=0.11",
  "granian>=2.0",
  "loguru>=0.7.3",
  "niquests>=3.13",
  "scikit-fingerprints>=1.15", # When updating, adjust any API docs (e.g. if default parameters change)
  "rdkit>=2024.9.5", # When updating, check for backwards-incompatible changes.
  "rfc9457>=0.3",
  "typer-slim>=0.15",
  "tzdata>=2025.2; platform_system == 'Windows'",
]

[project.optional-dependencies]

compression = [
  "starlette-compress>=1.5",
  "zstd>=1.5.6",
]

# -------------------------- scripts --------------------------------------
[project.scripts]
# ::tyranno:: $<<project.name>> = "$<<project.name>>.__main__:cli"
chem-search-etl = "rcsbchemsearch.__main__:cli"

# -------------------------- project URIs -------------------------------------
[project.urls]
# ::tyranno:: "https://github.com/$<<.frag>>"
Homepage = "https://github.com/rcsb/rcsb-chem-search"
# ::tyranno:: "https://github.com/$<<.frag>>"
Source = "https://github.com/rcsb/rcsb-chem-search"
# ::tyranno:: Documentation = https://$<<.vendor>>.github.io/$<<project.name>>
Documentation = "https://github.com/rcsb/rcsb-chem-search"
# ::tyranno:: "Tracker" = $<<.home>>/issues
Tracker = "https://github.com/rcsb/rcsb-chem-search/issues"
# ::tyranno:: Download = "https://pypi.org/project/$<<project.name>>"
Download = "https://pypi.org/project/rcsb-chem-search/"
# ::tyranno:: "Release Notes" = "https://github.com/$<<.frag>>/releases"
"Release Notes" = "https://github.com/rcsb/rcsb-chem-search/releases"

#
###################################################################################################
#                                        [dependency-groups]
###################################################################################################
[dependency-groups]
# `--only-dev` literally means only the `dev` group, so include everything.
# Also define groups for use in CI.
dev = [
  "coverage[toml]>=7.8",
  "deal>=4.24",
  "hypothesis>=6.130",
  "pre-commit>=4.2",
  "pyright[nodejs]>=1.1.400",
  "pytest>=8.3",
  "pytest-cov>=6.1",
  "ruff>=0.11.7",
]
test = [
  "coverage[toml]>=7.8",
  "hypothesis>=6.130",
  "pytest>=8.3",
  "pytest-cov>=6.1",
]
# Detect and mark problems; shouldn't make changes (albeit `ruff check --fix` works).
check = [
  "pre-commit>=4.2",
  "pyright[nodejs]>=1.1.400",
  "ruff>=0.11.7",
]
ruff = ["ruff>=0.11.7"]
precommit = ["pre-commit>=4.2"]

#
###################################################################################################
#                                        [tool.hatch]
###################################################################################################

[tool.hatch.build.targets.wheel]

# Needed only if `project.name.replace("-", "_") != namespace`,
# where `namespace` is the dir under `src/`.
# ::tyranno:: packages = ["src/$<<.namespace>>"]
packages = ["src/rcsbchemsearch"]

#
###################################################################################################
#                                        [tool.ruff]
###################################################################################################

[tool.ruff]
exclude = [] # Rely on https://docs.astral.sh/ruff/settings/#respect-gitignore
src = ["src"] # Needed for import sorting
line-length = 120 # 120 is hatch's default via 'hatch init'

#=========================== [tool.ruff.format] ==============================#
[tool.ruff.format]
docstring-code-format = true
skip-magic-trailing-comma = true

#=========================== [tool.ruff.lint] ================================#
[tool.ruff.lint]

preview = true

# -------------------------- Ruff selected rules ------------------------------
#          >>>#<<< align to col 15 (max possible width)
select = [
  "A",        # flake8-builtins
  "AIR",      # Airflow (does nothing if not used)
  "ANN",      # flake8-annotations
  #"ARG",     # flake8-unused-args //DISABLED: unused args may be necessary in overridden//
  "ASYNC",    # flake8-async
  "B",        # flake8-bugbear
  "B901",     # PREVIEW: Both `return` and `yield` in function/method
  #"BLE",     # flake8-blind-exception (try: * except: only) //DISABLED: covered by E722//
  "C4",       # flake8-comprehensions
  #"C90",     # mmcabe //DISABLED: useful but thin-lined and time-intensive//
  #"COM",     # flake8-commas //DISABLED: handled by formatter//
  #"CPY",     # flake8-copyright //DISABLED: handle carefully instead; also unmaintained//
  #"D",       # pydocstyle //DISABLED: most rules handled by formatter//
  "D100",     # undocumented public module (could be just 1 line)
  "D101",     # undocumented public class (could be just 1 line)
  #"D102",    # undocumented public method //DISABLED: unnecessary if obviously named//
  #"D103",    # undocumented public method //DISABLED: unnecessary if obviously named//
  #"D104",    # undocumented public package //DISABLED: unnecessary if obviously named//
  #"D105",    # undocumented magic method //DISABLED: usually unnecessary//
  #"D106",    # undocumented nested public class //DISABLED: often covered by enclosing class//
  #"D107",    # undocumented `__init__` method //DISABLED: refactor if it needs documenting//
  "D210",     # whitespace around text (almost all auto-fixable)
  "D214",     # over-indented section
  "D3",       # docstring ''', \, etc. (almost all auto-fixable)
  "D4",       # blank docstring sections, etc. (almost all auto-fixable)
  "DJ",       # flake8-django (does nothing if not used)
  #"DOC",     # pydoclint //DISABLED: encourages writing sections out of habit//
  "DOC202",   # says "return" but does not (PREVIEW)
  "DOC403",   # says "yield" but does not (PREVIEW)
  "DOC502",   # says "raise" but does not (PREVIEW)
  "DTZ",      # flake8-datetimez
  #"E",       # pycodestyle ERRORs //DISABLED: almost all handled by formatter//
  "E7",       # == True, bare except, lambda assignment, 'l' in names, etc.
  "E9",       # can't lint -- syntax error, etc.
  "EM",       # flake8-errmsg
  #"ERA",      # eradicate (commented-out code) //DISABLED: error-prone//
  #"EXE",     # flake8-executable //DISABLED: pre-commit shebang rules instead//
  "F",        # pyflakes
  "FA",       # flake8-future-annotations
  "FAST",     # fastapi (does nothing if unused)
  #"FBT",     # flake8-boolean-trap //DISABLED: debatable and sometimes unavoidable//
  #"FIX",     # flake8-fix*me //DISABLED: unnecessary //
  "FIX003",   # 'XXX: ' comments (use F*I*X*M*E or T*O*D*O instead)
  "FIX004",   # 'HACK: ' comments (use F*I*X*M*E or T*O*D*O instead)
  "FLY",      # flynt (https://pypi.org/project/flynt/; updates .format)
  "FURB",     # refurb (misc., mostly fixable)
  #"E",       # flake8 errors //DISABLED: handled by formatter or nitpicky//
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventionals
  #"INP",     # flake8-no-pep420 (require __init__.py to import) //DISABLED: false positives//
  "INT",      # flake8-gettext (i18n)
  "ISC",      # flake8-implicit-str-concat
  "LOG",      # flake8-logging
  "N",        # pep8-naming
  "NPY",      # Numpy rules (does nothing if not used)
  "PD",       # pandas-vet (does nothing if not used)
  "PERF",     # perflint
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie (misc. lint rules)
  "PL",       # pylint (PLC, PLE, PLR, and PLW)
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  #"PYI",     # flake8-pyi (rules for stub files) //DISABLED: auto-generate stub files//
  #"Q",       # flake8-quotes //DISABLED: discouraged by Ruff: formatter covers it//
  #"RSE",     # flake8-raise //DISABLED: should pass exception args; auto-fix makes mistakes//
  "RET",      # flake8-return (almost all auto-fixable)
  "RUF",      # Ruff-specific tests
  "S",        # bandit
  "SIM",      # flake8-simplify
  "SLF",      # flake8-self (private access)
  "SLOT",     # flake8-slots
  "T10",      # flake8-debugger (bans debugger)
  "T20",      # flake8-print (bands print and pprint)
  #"TC",      # flake8-type-checking //DISABLED: don't worry about TYPE_CHECKING blocks//
  "TC004",    # move imports that can't be in TYPE_CHECKING blocks
  "TC005",    # remove empty TYPE_CHECKING blocks
  "TC008",    # remove quotes from type aliases
  #"TD",      # flake8-to*do //DISABLED: bans fix*me, needs specific syntax, nitpicky//
  "TID",      # flake8-tidy-imports (bans relative imports)
  "TRY",      # tryceratops (try-except-raise)
  "UP",       # pyupgrade
  #"W",       # warnings //DISABLED: most fixed by formatter//
  "W60",      # E605 invalid escape character
  "YTT",      # flake8-2020 (incorrect Python version checks)
  "RUF",      # Ruff-specific rules
  "RUF027",   # possible f-string (PREVIEW)
]

# -------------------------- Ruff ignored rules -------------------------------
ignore = [
  "PLR6301",  # 'self' not used (correct for overrides; more OOP)
  "RUF001",   # confusable characters
  "RUF002",   # confusable characters
  "RUF003",   # confusable characters
  "PLC0415",  # imports at top (sometimes want lazy import)
  "RUF021",   # demands parentheses in `or (x and y)`
]

# -------------------------- Ruff unfixable rules -----------------------------
unfixable = [
  "ERA001",   # commented-out code (not autofixable currently, but just in case)
  "F841",     # unused variable
  "SIM112",   # uncapitalized env var
  "RUF027",   # possible f-string -- can make mistakes
  "RUF102",   # invalid noqa
]

# -------------------------- Ruff delegated options ---------------------------
flake8-bandit.check-typed-exception = true
pydocstyle.convention = "google"
flake8-tidy-imports.ban-relative-imports = "all"
isort.detect-same-package = false # Use `tool.ruff.src` instead.
isort.split-on-trailing-comma = false

# -------------------------- delegated pylint options -------------------------
[tool.ruff.lint.pylint]
max-args = 10 # default is 5 (leave `max_positional_args` at 5)
max-bool-expr = 10 # default is 5
max-public-methods = 30 # default is 20
max-nested-blocks = 4 # default is 5
allow-dunder-method-names = ["__rich_repr__"] # allow custom dunders

# -------------------------- Ruff per-file ignores ----------------------------
[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
  "INP001",  # missing __init__
  "PLR2004", # magic value
  "S101",    # assert
  "S105",    # possible password in string
  "S106",    # in function arg
  "S107",    # in function default
  "S108",    # harcoded temp file
  "TID252",  # relative import
]

#
###################################################################################################
#                                        [tool.pytest]
###################################################################################################

[tool.pytest.ini_options] # pending `[tool.pytest]`

# ******************************* Notes for running tests ******************************************
#
# - When running tests, the working directory should be the project root.
# - pytest-cov is not compatible with the PyCharm/IntelliJ debugger.
#   See https://www.jetbrains.com/help/pycharm/run-debug-configuration-py-test.html
#
# **************************************************************************************************

# This pytest 7+ option avoids repeating the package name in various options.
pythonpath = ["src/"]

# Set the default path to `tests/` so that it can be omitted on CLI.
# Don't use `.` or `["tests/", "src/"]`, which would run `src/**/test*.py`.
# For doctests, run `pytest --doctest-modules src/`
testpaths = ["tests/"]

# -------------------------- Logging config -----------------------------------
# Configure logging, and send it "live" (in realtime) to stdout with `log_cli`.
# In `tests/**/*.py`, append `-TEST` to logger names to distinguish them.
log_level = "WARNING"
log_cli = true
log_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)"
log_date_format = "%Y-%m-%d %H:%M:%S"

# -------------------------- Doctest options ----------------------------------
# These are used when running `pytest --doctest-modules src/`.
doctest_optionflags = [
  "DONT_ACCEPT_TRUE_FOR_1", # Makes doctest not consider 1 to equal True.
  "NORMALIZE_WHITESPACE",   # Ignores newlines, so we can wrap expected output.
]

# -------------------------- Test markers -------------------------------------
# Create markers for very slow, network-dependent, or interactive tests.
# To run only unit tests, use `-m 'not (slow or net or ux)'`.
markers = [
  "slow: marks tests that take a long time to run (select with `-m slow`)",
  "net: marks tests that require network access (select with `-m net`)",
  "ux: marks tests that require live interaction (select with `-m ux`)",
  "property: marks tests that use Hypothesis or otherwise generate test data (select with `-m property`)",
]

# -------------------------- Pytest CLI args ----------------------------------
# The `--cov-*` options are handled by pytest-cov.
# `--import-mode=importlib` is recommended but **requires test classes to have unique names**.
# `--quiet` just hides ouptut about 'rootdir', 'testpaths', etc.
addopts = """
  --cov=src \
  --cov-report json:.coverage.json \
  --cov-report=term \
  --cov-config=pyproject.toml \
  --import-mode=importlib \
  --strict-config \
  --strict-markers \
  --quiet \
  --tb=short \
"""

#
###################################################################################################
#                                        [tool.coverage]
###################################################################################################

#============================ [tool.coverage.run] ============================#
[tool.coverage.run]
data_file = ".coverage.json"
branch = true # Quantify the % coverage of execution branches.
relative_files = true # See <https://coverage.readthedocs.io/en/7.6.12/config.html#run-relative-files>
omit = ["**/__main__.py"]

#============================ [tool.coverage.paths] ==========================#
[tool.coverage.paths]
source = ["src/"]

#============================ [tool.coverage.report] =========================#
[tool.coverage.report]
fail_under = 2 # Require % coverage to ensure config is correct
format = "markdown"
precision = 1 # n decimal points for coverage %
show_missing = true
skip_empty = true
exclude_also = [
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == \"__main__\":",
  "if TYPE_CHECKING:",
  "if typing.TYPE_CHECKING:",
]

#
###################################################################################################
#                                        [tool.pyright]
###################################################################################################

[tool.pyright]

include = ["src/**/*.py", "tests/**/*.py"]

# Set the typing profile.
# The "type checking mode" sets most of the other options.
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md#type-check-diagnostics-settings
# `strict` sets most `strict*` options to `true` and most `report*` options to "error".
typeCheckingMode = "strict"
# Everything below overrides specific `typeCheckingMode` options.

# Override type evaluation settings.
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md#type-evaluation-settings
deprecateTypingAliases = true

# Override reporting options.
# Can be "none", "information", "warning", or "error.
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md#diagnostic-settings-defaults
reportCallInDefaultInitializer = "information"
reportImplicitOverride = "error"
reportImportCycles = "error"
reportMissingSuperCall = "error"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "warning"
reportUninitializedInstanceVariable = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportUnusedCallResult = "information"

#
###################################################################################################
#                                        [tool.tyranno]
###################################################################################################

[tool.tyranno]

# These are `.gitignore`-type patterns.
# All `.gitignore`-ed files are automatically excluded.`

# Target files to sync on `tyranno sync`
targets = [
  "/.*ignore",
  "/.editorconfig",
  "/CITATION.cff",
  "/justfile",
  "*.css",
  "*.ini",
  "*.js",
  "*.md",
  "*.py",
  "*.ts",
  "*.toml",
  "*.yaml",
  "Dockerfile",
]

#============================ [tool.tyranno.data] ============================#
# No keys have any special meanings.
[tool.tyranno.data]
vendor = "rcsb"
# ::tyranno:: namespace = "$<<project.name|replace(@, '_', '-')|lower(@)>>"
namespace = "rcsbchemsearch"
# ::tyranno:: frag = "$<<vendor>>/$<<project.name>>"
frag = "rcsb/rcsb-chem-search"
# ::tyranno:: copyright = "Copyright $<<now_utc().year>>, Contributors to $<<project.name>>"
copyright = "Copyright 2025, Contributors to rcsb-chem-search"
