# SPDX-FileCopyrightText: Copyright 2020-2024, Contributors to Tyrannosaurus
# SPDX-PackageHomePage: https://github.com/dmyersturnbull/tyrannosaurus
# SPDX-License-Identifier: Apache-2.0

# Replaces all issue/PR labels, and sets description, homepage, and topics if a secret called PAT is defined
# github.token only has read permission for 'metadata'
# https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#

name: Update project settings
run-name: >
  ${{ github.workflow }}
  (run=${{ github.run_id }})

on:
  push:
    paths:
      - '.github/project.yaml'
      - '.github/workflows/set-repo-metadata.yaml'
    branches:
      - main
      - master

permissions:
  contents: write
  issues: write

jobs:
  update-metadata:
    runs-on: ubuntu-latest
    env:
      SETTINGS_PATH: .github/project.yaml
      # for historical reasons, the GH CLI uses GH_TOKEN instead of GITHUB_TOKEN
      # https://github.com/github/docs/issues/21930
      GH_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/checkout@v4

      - name: Install yq
        run: sudo snap install yq

      # TODO: broken
      #      - name: Set repo metadata
      #        env:
      #          GH_TOKEN: ${{ secrets.PAT }}
      #        run: |
      #          # Read the metadata
      #          description=$(yq eval '.description' "${SETTINGS_PATH}")
      #          homepage=$(yq eval '.homepage' "${SETTINGS_PATH}")
      #          topics=$(yq eval '.topics | join(",")' "${SETTINGS_PATH}")
      #          # Update repo
      #          gh repo edit "${{ github.repository }}" \
      #            --description "${description}" \
      #            --homepage "${homepage}" \
      #            --add-topic "${topics}"
      #          && echo "Updated repo description, homepage, and topics."

      - name: Delete existing labels
        run: |
          # Fetch all existing labels using REST API
          labels_blob=$(gh api "/repos/${{ github.repository }}/labels" --jq '.[].name')
          # Loop over the labels and delete them
          while IFS= read -r label; do
            echo "Deleting label: //${label}//"
            gh api --method DELETE "/repos/${{ github.repository }}/labels/${label}"
          done <<< "${labels_blob}"

      - name: Wait for changes to be made
        shell: bash
        run: |
          sleep 15
          labels_blob=$(gh api "/repos/${{ github.repository }}/labels" --jq '.[].name')
          # Loop over the labels and delete them
          while IFS= read -r label; do
            echo "ERROR!! ${label} still exists."
            exit 1
          done

      - name: Create new labels
        run: |
          # Extract the new labels into var ${labels}, a JSON string
          labels=$(yq eval --output-format=json '.labels' "${SETTINGS_PATH}")
          # Iterate over the labels, adding one at a time
          echo "${labels}" | jq --compact-output '.[]' | while read label; do
            # Extract the keys out of the JSON entry
            name=$(echo "${label}" | jq --raw-output '.name')
            description=$(echo "${label}" | jq --raw-output '.description')
            color=$(echo "${label}" | jq --raw-output '.color' | sed 's/#//')
            # Add the label via the REST API
            echo "Creating label ${name}"
            gh api --method POST "/repos/${{ github.repository }}/labels" \
              -f name="${name}" \
              -f color="${color}" \
              -f description="${description}" \
              -H "Accept: application/vnd.github+json"
          done
